use anyhow::Error;
use std::path::PathBuf;
use structopt::StructOpt;

/// Read the phrases from a file and define which tokens will need to be placed in the final
/// puzzle
#[derive(Debug, StructOpt)]
pub struct Tokenize {
    /// The input file, generated by `generate-phrases`.
    phrases: PathBuf,
    /// The output file. TODO: describe format
    output: PathBuf,
}

pub fn tokenize(cmd: Tokenize) -> Result<(), Error> {
    todo!()
    // let mut texts = Texts::new();
    // let mut phrases =
    //
    // let (texts, phrases) = phrases(&[Box::new(English), Box::new(French), Box::new(Portuguese)]);
    // let phrases = tokenize::tokenize(
    //     &texts,
    //     &phrases,
    //     &[
    //         Schedule {
    //             max_actions: 3,
    //             max_values: 10,
    //             patience: 5,
    //         },
    //         Schedule {
    //             max_actions: 5,
    //             max_values: 100,
    //             patience: 10,
    //         },
    //         Schedule {
    //             max_actions: 10,
    //             max_values: 1000,
    //             patience: 20,
    //         },
    //         Schedule {
    //             max_actions: 100,
    //             max_values: 10000,
    //             patience: 40,
    //         },
    //     ],
    //     17,
    // );
}
